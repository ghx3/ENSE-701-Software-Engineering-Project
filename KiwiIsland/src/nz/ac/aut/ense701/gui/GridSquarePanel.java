package nz.ac.aut.ense701.gui;

import java.awt.Color;

import javax.swing.ImageIcon;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import nz.ac.aut.ense701.gameModel.Game;
import nz.ac.aut.ense701.gameModel.Terrain;

/*
 * Panel for representing a single GridSquare of the island on the GUI.
 * 
 * @author AS
 * @version 1.0 - created
 */

public class GridSquarePanel extends javax.swing.JPanel {
	/**
	 * Creates new GridSquarePanel.
	 * 
	 * @param game
	 *            the game to represent
	 * @param row
	 *            the row to represent
	 * @param column
	 *            the column to represent
	 */
	public GridSquarePanel(Game game, int row, int column) {
		this.game = game;
		this.row = row;
		this.column = column;
		initComponents();
	}

	/**
	 * Updates the representation of the grid square panel.
	 */
	public void update() {
		// get the GridSquare object from the world
		Terrain terrain = game.getTerrain(row, column);
		boolean squareVisible = game.isVisible(row, column);
		boolean squareExplored = game.isExplored(row, column);
		//create terrain image
		switch (terrain) {
		case WATER:
			lblText.setIcon(new ImageIcon(water));
			break;
		case WETLAND:
			lblText.setIcon(new ImageIcon(wetland));
			break;
		case SCRUB:
			lblText.setIcon(new ImageIcon(scrub));
			break;
		case FOREST:
			lblText.setIcon(new ImageIcon(forest));
			break;
		case SAND:
			lblText.setIcon(new ImageIcon(sand));
			break;
		default:
			lblText.setIcon(new ImageIcon(cover));
			break;
		}

		if (squareExplored || squareVisible) {
			// Set the text of the JLabel according to the occupant
			lblText.setText(game.getOccupantStringRepresentation(row, column));
			// set border colour according to playerBorder of not
			setBorder(game.hasPlayer(row, column) ? activeBorder : normalBorder);
		} else {
			lblText.setText("");
			lblText.setIcon(new ImageIcon(cover));
			setBorder(normalBorder);

		}
		// create the main character image
		if (game.hasPlayer(row, column)) {
			lblText.setIcon(new ImageIcon(player));
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		lblText = new javax.swing.JLabel();

		setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		setLayout(new java.awt.BorderLayout());

		lblText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
		lblText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		lblText.setText("content");
		lblText.setOpaque(true);
		add(lblText, java.awt.BorderLayout.CENTER);
	}// </editor-fold>//GEN-END:initComponents
		// Variables declaration - do not modify//GEN-BEGIN:variables

	private javax.swing.JLabel lblText;
	// End of variables declaration//GEN-END:variables

	private Game game;
	private int row, column;
	// Loading pictures from the resources folder
	private String water = "Resources/water.jpg";
	private String wetland = "Resources/wetland.jpg";
	private String scrub = "Resources/scrub.jpg";
	private String forest = "Resources/forest.jpg";
	private String sand = "Resources/sand.jpg";
	private String cover = "Resources/cover.jpg";
	private String player = "Resources/player.jpg";

	private static final Border normalBorder = new LineBorder(Color.BLACK, 1);
	private static final Border activeBorder = new LineBorder(Color.RED, 3);
}
